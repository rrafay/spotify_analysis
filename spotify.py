# -*- coding: utf-8 -*-
"""Spotify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T99ebdozd6HlkQvcP9GdeuQoou1TXVz_
"""

pip install spotipy

import sys
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

import spotipy.util as util

scope = 'user-library-read playlist-read-private'

if len(sys.argv) > 1:
  username = sys.argv[1]
else:
  print("Usage: %s username" % (sys.argv[0], ))
  sys.exit()
token = util.prompt_for_user_token(username, scope, client_id='84070371d7a0497183574178523abfcc', client_secret= '#', redirect_uri= 'http://localhost:3000/')

sp = spotipy.Spotify(auth=token)

playlist = sp.user_playlist("11156576577" , "37i9dQZEVXbLRQDuF5jeBp?si=zUtsrkt-R6mhHCf8HO6P9Q")

tracks = playlist["tracks"]
songs = tracks["items"]



while tracks['next']:
  tracks = sp.next(tracks)
  for item in tracks["items"]:
    songs.append(item)
good_ids = []

for i in range(len(songs)):
  good_ids.append(songs[i]['track']['id'])

features = []
for i in range(0, len(songs),50):
    audio_features = sp.audio_features(good_ids[i: i + 50])
    for track in audio_features:
      features.append(track)
      features[-1]['target'] = 1

#audio_features = sp.audio_features(good_ids)

audio_features

import pandas as pd

training = pd.DataFrame(audio_features)

training.head()
#training

acousticness = training['acousticness']
danceability = training['danceability']
energy = training['energy']
instrumentalness = training['instrumentalness']
liveness = training['liveness']
loudness = training['loudness']
speechiness = training['speechiness']
valence = training['valence']
tempo = training['tempo']
#training





"""**Acousticness** Wheather the track is acoustic or not. Range 0-1. 
0 being not acoustic at all. 1 being the most acoustic.

---

**Danceability** Describes how suitable a track is for dancing based on tempo, rhythm stability, beat strength and overall regularity. 

---
**Energy** Represents a perpetual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.  For example, death metal has high energy, while a Bach prelude scores low on the scale.

---
**Instrumentalness** Represents how much vocals a track contains. 1.0 means no vocals

---
**Liveness** Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.

---
**Speechiness** 	Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 

---
**Valence** A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).

---
**Tempo** 	The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
"""

import matplotlib.pyplot as plt
#plt.plot(acousticness)

#my_plot = acousticness.hist(alpha = 0.5, color = "red")
#plt.title("Acousticness Plot")

#Acousticness
my_plot = acousticness.hist(alpha = 0.5, color = "red")
plt.title("Acousticness Plot")
#fig = plt.figure(figsize=(15,15))
#mp_0 = fig.add_subplot(329)
#mp_0.set_xlabel("Acousticness")
#mp_0.set_ylabel("Count")
#mp_0.set_title("Song Acousticness Distribution")
#acousticness.hist(alpha = 0.5, color = "red")


#Danceability
fig = plt.figure(figsize=(15,15))
mp_1 = fig.add_subplot(331)
mp_1.set_xlabel("Danceability")
mp_1.set_ylabel("Count")
mp_1.set_title("Song Danceability Distribution")
danceability.hist(alpha = 0.5, color = "red")

#Energy
mp_2 = fig.add_subplot(332)
mp_2.set_xlabel("Energy")
mp_2.set_ylabel("Count")
mp_2.set_title("Song Energy Distribution")
energy.hist(alpha = 0.5, color = "red")

#Instrumentalness
mp_3 = fig.add_subplot(333)
mp_3.set_xlabel("Instrumentalness")
mp_3.set_ylabel("Count")
mp_3.set_title("Song Instrumentalness Distribution")
instrumentalness.hist(alpha = 0.5, color = "red")

#Liveness
mp_4 = fig.add_subplot(334)
mp_4.set_xlabel("Liveness")
mp_4.set_ylabel("Count")
mp_4.set_title("Song Liveness Distribution")
liveness.hist(alpha = 0.5, color = "red")

#Speechiness
mp_5 = fig.add_subplot(335)
mp_5.set_xlabel("Speechiness")
mp_5.set_ylabel("Count")
mp_5.set_title("Song Speechiness Distribution")
speechiness.hist(alpha = 0.5, color = "red")

#Valence
mp_6 = fig.add_subplot(336)
mp_6.set_xlabel("Valence")
mp_6.set_ylabel("Count")
mp_6.set_title("Song Valence Distribution")
valence.hist(alpha = 0.5, color = "red")

#Tempo
mp_7 = fig.add_subplot(337)
mp_7.set_xlabel("Tempo")
mp_7.set_ylabel("Count")
mp_7.set_title("Song Tempo Distribution")
tempo.hist(alpha = 0.5, color = "red")

from statistics import *

#mean(acousticness)
#mean(danceability)
#mean(energy)
#mean(instrumentalness)
#mean(liveness)
#mean(loudness)
#mean(speechiness)
#mean(valence)
#mean(tempo)

mean(energy)

mean(tempo)

mean(acousticness)

